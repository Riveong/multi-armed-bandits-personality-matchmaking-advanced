{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ff022eb",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:04.032774Z",
     "iopub.status.busy": "2024-05-01T04:12:04.032218Z",
     "iopub.status.idle": "2024-05-01T04:12:05.170205Z",
     "shell.execute_reply": "2024-05-01T04:12:05.168401Z"
    },
    "papermill": {
     "duration": 1.158916,
     "end_time": "2024-05-01T04:12:05.173475",
     "exception": false,
     "start_time": "2024-05-01T04:12:04.014559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/preprocessed/preprocessed_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02267dea",
   "metadata": {
    "papermill": {
     "duration": 0.015688,
     "end_time": "2024-05-01T04:12:05.205827",
     "exception": false,
     "start_time": "2024-05-01T04:12:05.190139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "![Multi Armed](https://media.discordapp.net/attachments/1023598916857499680/1228695121919344700/Desktop_-_4.png?ex=662cfa81&is=661a8581&hm=d0a7cd731cb0afdc3d67238dd26e876fac0f0e39a2b82ebe98b71f5e12630f96&=&format=webp&quality=lossless&width=1440&height=442)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6489b839",
   "metadata": {
    "papermill": {
     "duration": 0.016217,
     "end_time": "2024-05-01T04:12:05.238566",
     "exception": false,
     "start_time": "2024-05-01T04:12:05.222349",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dataset link :<br>\n",
    "Code by :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84d75fb8",
   "metadata": {
    "papermill": {
     "duration": 0.016568,
     "end_time": "2024-05-01T04:12:05.273395",
     "exception": false,
     "start_time": "2024-05-01T04:12:05.256827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d0fbbc46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:05.311637Z",
     "iopub.status.busy": "2024-05-01T04:12:05.310962Z",
     "iopub.status.idle": "2024-05-01T04:12:06.260279Z",
     "shell.execute_reply": "2024-05-01T04:12:06.259026Z"
    },
    "papermill": {
     "duration": 0.972179,
     "end_time": "2024-05-01T04:12:06.263329",
     "exception": false,
     "start_time": "2024-05-01T04:12:05.291150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predf = pd.read_csv('/kaggle/input/preprocessed/preprocessed_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "829e1cde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.299181Z",
     "iopub.status.busy": "2024-05-01T04:12:06.298425Z",
     "iopub.status.idle": "2024-05-01T04:12:06.327877Z",
     "shell.execute_reply": "2024-05-01T04:12:06.326702Z"
    },
    "papermill": {
     "duration": 0.050637,
     "end_time": "2024-05-01T04:12:06.330542",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.279905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>user_id</th>\n",
       "      <th>match_id</th>\n",
       "      <th>similarity_score</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.932901</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.991195</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.853614</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.188426</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806399</th>\n",
       "      <td>806399</td>\n",
       "      <td>893</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.997454</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806400</th>\n",
       "      <td>806400</td>\n",
       "      <td>894</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.165053</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806401</th>\n",
       "      <td>806401</td>\n",
       "      <td>895</td>\n",
       "      <td>897</td>\n",
       "      <td>0.291728</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806402</th>\n",
       "      <td>806402</td>\n",
       "      <td>896</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.095429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806403</th>\n",
       "      <td>806403</td>\n",
       "      <td>897</td>\n",
       "      <td>897</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>806404 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0  user_id  match_id  similarity_score  response\n",
       "0                0        0         0          1.000000         1\n",
       "1                1        1         0         -0.932901         0\n",
       "2                2        2         0          0.991195         1\n",
       "3                3        3         0          0.853614         1\n",
       "4                4        4         0         -0.188426         0\n",
       "...            ...      ...       ...               ...       ...\n",
       "806399      806399      893       897         -0.997454         0\n",
       "806400      806400      894       897         -0.165053         0\n",
       "806401      806401      895       897          0.291728         0\n",
       "806402      806402      896       897         -0.095429         0\n",
       "806403      806403      897       897          1.000000         1\n",
       "\n",
       "[806404 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e4d19f09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.364193Z",
     "iopub.status.busy": "2024-05-01T04:12:06.363777Z",
     "iopub.status.idle": "2024-05-01T04:12:06.380426Z",
     "shell.execute_reply": "2024-05-01T04:12:06.379005Z"
    },
    "papermill": {
     "duration": 0.036625,
     "end_time": "2024-05-01T04:12:06.383169",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.346544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predf.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c9aa36d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.417430Z",
     "iopub.status.busy": "2024-05-01T04:12:06.417018Z",
     "iopub.status.idle": "2024-05-01T04:12:06.435871Z",
     "shell.execute_reply": "2024-05-01T04:12:06.434695Z"
    },
    "papermill": {
     "duration": 0.039244,
     "end_time": "2024-05-01T04:12:06.438673",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.399429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predf=predf.drop(['Unnamed: 0'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1d29dbfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.472364Z",
     "iopub.status.busy": "2024-05-01T04:12:06.471969Z",
     "iopub.status.idle": "2024-05-01T04:12:06.486035Z",
     "shell.execute_reply": "2024-05-01T04:12:06.484800Z"
    },
    "papermill": {
     "duration": 0.034213,
     "end_time": "2024-05-01T04:12:06.488647",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.454434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>match_id</th>\n",
       "      <th>similarity_score</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.932901</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.991195</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.853614</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.188426</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806399</th>\n",
       "      <td>893</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.997454</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806400</th>\n",
       "      <td>894</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.165053</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806401</th>\n",
       "      <td>895</td>\n",
       "      <td>897</td>\n",
       "      <td>0.291728</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806402</th>\n",
       "      <td>896</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.095429</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806403</th>\n",
       "      <td>897</td>\n",
       "      <td>897</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>806404 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        user_id  match_id  similarity_score  response\n",
       "0             0         0          1.000000         1\n",
       "1             1         0         -0.932901         0\n",
       "2             2         0          0.991195         1\n",
       "3             3         0          0.853614         1\n",
       "4             4         0         -0.188426         0\n",
       "...         ...       ...               ...       ...\n",
       "806399      893       897         -0.997454         0\n",
       "806400      894       897         -0.165053         0\n",
       "806401      895       897          0.291728         0\n",
       "806402      896       897         -0.095429         0\n",
       "806403      897       897          1.000000         1\n",
       "\n",
       "[806404 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e7d2332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.524311Z",
     "iopub.status.busy": "2024-05-01T04:12:06.523891Z",
     "iopub.status.idle": "2024-05-01T04:12:06.529257Z",
     "shell.execute_reply": "2024-05-01T04:12:06.527858Z"
    },
    "papermill": {
     "duration": 0.025928,
     "end_time": "2024-05-01T04:12:06.531939",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.506011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6c3b58d",
   "metadata": {
    "papermill": {
     "duration": 0.015997,
     "end_time": "2024-05-01T04:12:06.564876",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.548879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Recommender\n",
    "Learning Policy:  \n",
    "- Greedy (epsilon)\n",
    "- Linear Greedy\n",
    "- Linear Greedy (with epsilon)\n",
    "- Thompson Sampling\n",
    "\n",
    "Usage Guide:  \n",
    "num arm = num of items  \n",
    "num rounds = num of iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f98e977",
   "metadata": {
    "papermill": {
     "duration": 0.015898,
     "end_time": "2024-05-01T04:12:06.597056",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.581158",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Greedy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6df025db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.631356Z",
     "iopub.status.busy": "2024-05-01T04:12:06.630942Z",
     "iopub.status.idle": "2024-05-01T04:12:06.641435Z",
     "shell.execute_reply": "2024-05-01T04:12:06.640255Z"
    },
    "papermill": {
     "duration": 0.030746,
     "end_time": "2024-05-01T04:12:06.644095",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.613349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def epsilon_greedy_bandit(dataset, num_arms, epsilon, num_rounds):\n",
    "    estimated_rewards = [0] * num_arms\n",
    "    num_selected = [0] * num_arms\n",
    "    total_rewards = 0\n",
    "    exploration_count = 0\n",
    "    exploitation_count = 0\n",
    "\n",
    "    for _ in range(num_rounds):\n",
    "        if random.random() < epsilon:\n",
    "            # Explore: Choose a random arm\n",
    "            chosen_arm = random.randint(0, num_arms - 1)\n",
    "            exploration_count += 1\n",
    "        else:\n",
    "            # Exploit: Choose the arm with the highest estimated reward\n",
    "            chosen_arm = max(range(num_arms), key=lambda arm: estimated_rewards[arm])\n",
    "            exploitation_count += 1\n",
    "\n",
    "        # Randomly select an observation for the chosen arm from the dataset\n",
    "        chosen_row = dataset[dataset['match_id'] == chosen_arm].sample(n=1)\n",
    "        \n",
    "        # Observe the reward (response) for the chosen arm\n",
    "        reward = chosen_row['response'].values[0]\n",
    "        total_rewards += reward\n",
    "\n",
    "        # Update the estimated reward for the chosen arm\n",
    "        num_selected[chosen_arm] += 1\n",
    "        estimated_rewards[chosen_arm] += (reward - estimated_rewards[chosen_arm]) / num_selected[chosen_arm]\n",
    "\n",
    "    return estimated_rewards, num_selected, exploration_count, exploitation_count, total_rewards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e0430a6b",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:06.679617Z",
     "iopub.status.busy": "2024-05-01T04:12:06.679205Z",
     "iopub.status.idle": "2024-05-01T04:12:06.919821Z",
     "shell.execute_reply": "2024-05-01T04:12:06.917572Z"
    },
    "papermill": {
     "duration": 0.263139,
     "end_time": "2024-05-01T04:12:06.924350",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.661211",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated rewards for each arm: [0.3636363636363636, 0.0, 0, 0.33333333333333337, 0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.5, 0, 0, 0.5333333333333333, 0, 0, 0.3333333333333333, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0.5, 0.0, 0, 0.5, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.0, 0, 0.33333333333333337, 0, 0, 0.5, 0, 0, 0.0, 0.5, 0.0, 0.0, 0, 0, 0, 0.5, 0, 0, 0.0, 0.0, 0.5, 0, 0, 0, 0, 0.0, 0.5, 0.5, 0, 0, 0, 0.5, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0.0, 0, 0, 0, 0.0, 0, 0]\n",
      "Number of times each arm was selected: [11, 1, 0, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 15, 0, 0, 3, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2, 0, 1, 1, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 0, 0, 1, 2, 4, 0, 0, 0, 0, 1, 10, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0]\n",
      "Exploration count: 53\n",
      "Exploitation count: 47\n",
      "Total rewards: 35\n"
     ]
    }
   ],
   "source": [
    "results = epsilon_greedy_bandit(predf, num_arms=100, epsilon=0.5, num_rounds=100)\n",
    "print(\"Estimated rewards for each arm:\", results[0])\n",
    "print(\"Number of times each arm was selected:\", results[1])\n",
    "print(\"Exploration count:\", results[2])\n",
    "print(\"Exploitation count:\", results[3])\n",
    "print(\"Total rewards:\", results[4])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42023eec",
   "metadata": {
    "papermill": {
     "duration": 0.018014,
     "end_time": "2024-05-01T04:12:06.960170",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.942156",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Thompson Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6140816d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:07.001175Z",
     "iopub.status.busy": "2024-05-01T04:12:07.000503Z",
     "iopub.status.idle": "2024-05-01T04:12:07.012592Z",
     "shell.execute_reply": "2024-05-01T04:12:07.011343Z"
    },
    "papermill": {
     "duration": 0.035993,
     "end_time": "2024-05-01T04:12:07.015862",
     "exception": false,
     "start_time": "2024-05-01T04:12:06.979869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def thompson_sampling_bandit(dataset, num_arms, num_rounds):\n",
    "    # Parameters for the Beta distribution of each arm: successes (alpha) and failures (beta)\n",
    "    alpha = np.ones(num_arms)\n",
    "    beta = np.ones(num_arms)\n",
    "    \n",
    "    total_rewards = 0\n",
    "\n",
    "    # Iterate through the specified number of rounds\n",
    "    for _ in range(num_rounds):\n",
    "        # Sample from the Beta distribution for each arm\n",
    "        theta = [np.random.beta(alpha[i] + 1, beta[i] + 1) for i in range(num_arms)]\n",
    "        \n",
    "        # Choose the arm with the highest sampled probability\n",
    "        chosen_arm = np.argmax(theta)\n",
    "\n",
    "        # Randomly select an observation for the chosen arm from the dataset\n",
    "        # Here, filtering dataset where 'match_id' equals chosen_arm and sampling one row\n",
    "        chosen_row = dataset[dataset['match_id'] == chosen_arm].sample(n=1)\n",
    "        \n",
    "        # Observe the reward (response) for the chosen arm\n",
    "        reward = chosen_row['response'].values[0]\n",
    "        total_rewards += reward\n",
    "        \n",
    "        # Update the alpha and beta for the chosen arm based on the reward\n",
    "        if reward > 0:\n",
    "            alpha[chosen_arm] += 1\n",
    "        else:\n",
    "            beta[chosen_arm] += 1\n",
    "\n",
    "    return alpha, beta, total_rewards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "941cdc4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:07.055350Z",
     "iopub.status.busy": "2024-05-01T04:12:07.054737Z",
     "iopub.status.idle": "2024-05-01T04:12:07.375482Z",
     "shell.execute_reply": "2024-05-01T04:12:07.373015Z"
    },
    "papermill": {
     "duration": 0.344872,
     "end_time": "2024-05-01T04:12:07.379243",
     "exception": false,
     "start_time": "2024-05-01T04:12:07.034371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated alpha and beta parameters: (array([2., 2., 1., 2., 1., 1., 1., 1., 2., 1., 2., 2., 1., 2., 1., 1., 2.,\n",
      "       2., 1., 1., 2., 6., 1., 2., 1., 1., 1., 1., 4., 2., 1., 1., 1., 1.,\n",
      "       2., 1., 1., 2., 2., 1., 1., 1., 2., 1., 2., 1., 1., 1., 1., 2., 1.,\n",
      "       1., 2., 1., 1., 1., 1., 1., 1., 2., 2., 1., 1., 2., 1., 1., 1., 1.,\n",
      "       1., 1., 1., 1., 2., 1., 1., 1., 2., 1., 2., 1., 1., 1., 1., 1., 2.,\n",
      "       1., 4., 1., 1., 1., 2., 1., 1., 1., 1., 3., 1., 1., 1., 1.]), array([2., 1., 2., 1., 2., 2., 2., 2., 1., 2., 2., 1., 2., 1., 1., 2., 1.,\n",
      "       1., 2., 1., 2., 2., 2., 2., 2., 2., 1., 1., 2., 1., 1., 1., 1., 2.,\n",
      "       2., 2., 2., 1., 2., 1., 2., 2., 1., 1., 2., 2., 2., 1., 2., 2., 1.,\n",
      "       2., 1., 2., 2., 2., 2., 1., 2., 1., 2., 2., 2., 1., 2., 2., 2., 1.,\n",
      "       2., 1., 1., 2., 1., 1., 2., 1., 2., 1., 2., 2., 2., 2., 2., 1., 1.,\n",
      "       1., 2., 1., 2., 2., 1., 1., 2., 2., 2., 2., 2., 2., 1., 1.]))\n",
      "Total rewards accumulated: 40\n"
     ]
    }
   ],
   "source": [
    "num_arms = 100 # Number of items\n",
    "num_rounds = 100  # Number of interactions\n",
    "results = thompson_sampling_bandit(predf, num_arms, num_rounds)\n",
    "print(\"Updated alpha and beta parameters:\", results[0:2])\n",
    "print(\"Total rewards accumulated:\", results[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dca7e2f",
   "metadata": {
    "papermill": {
     "duration": 0.017146,
     "end_time": "2024-05-01T04:12:07.414154",
     "exception": false,
     "start_time": "2024-05-01T04:12:07.397008",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Linear Greedy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "38bfac26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:07.453766Z",
     "iopub.status.busy": "2024-05-01T04:12:07.452165Z",
     "iopub.status.idle": "2024-05-01T04:12:09.339723Z",
     "shell.execute_reply": "2024-05-01T04:12:09.337803Z"
    },
    "papermill": {
     "duration": 1.911023,
     "end_time": "2024-05-01T04:12:09.344251",
     "exception": false,
     "start_time": "2024-05-01T04:12:07.433228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "def linear_greedy_bandit(dataset, num_arms, num_rounds):\n",
    "    model = LinearRegression()\n",
    "    total_rewards = 0\n",
    "    chosen_arms = []\n",
    "    \n",
    "    # Initialize the dataset for training the model\n",
    "    # Start with one example for each arm if possible\n",
    "    training_data = pd.DataFrame()\n",
    "    for arm in range(num_arms):\n",
    "        if dataset[dataset['match_id'] == arm].shape[0] > 0:\n",
    "            # Append the first instance for each arm to the training data\n",
    "            # Use concat instead of append\n",
    "            training_data = pd.concat([training_data, dataset[dataset['match_id'] == arm].iloc[:1]], ignore_index=True)\n",
    "\n",
    "    # Check if there are any entries in the training data before fitting\n",
    "    if not training_data.empty:\n",
    "        # Training the model on initial data\n",
    "        model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "        for _ in range(num_rounds):\n",
    "            predictions = model.predict(dataset[['similarity_score']])\n",
    "            dataset['predicted_reward'] = predictions\n",
    "\n",
    "            # Choose the arm with the highest predicted reward\n",
    "            max_indices = dataset.groupby('match_id')['predicted_reward'].idxmax()\n",
    "            chosen_arm = dataset.loc[max_indices].sample(n=1)\n",
    "            chosen_arm_index = chosen_arm.index.item()\n",
    "\n",
    "            # Observe the reward\n",
    "            reward = dataset.at[chosen_arm_index, 'response']\n",
    "            total_rewards += reward\n",
    "            chosen_arms.append(chosen_arm['match_id'].values[0])\n",
    "            \n",
    "            # Add this data point to the training dataset\n",
    "            training_data = pd.concat([training_data, dataset.loc[chosen_arm_index:chosen_arm_index]], ignore_index=True)\n",
    "\n",
    "            # Re-train the model with updated data\n",
    "            model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "    return chosen_arms, total_rewards\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de85f65f",
   "metadata": {
    "papermill": {
     "duration": 0.017414,
     "end_time": "2024-05-01T04:12:09.379691",
     "exception": false,
     "start_time": "2024-05-01T04:12:09.362277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## linear greedy with exploration (epsilon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "47a9d615",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:09.418031Z",
     "iopub.status.busy": "2024-05-01T04:12:09.417431Z",
     "iopub.status.idle": "2024-05-01T04:12:09.432469Z",
     "shell.execute_reply": "2024-05-01T04:12:09.430902Z"
    },
    "papermill": {
     "duration": 0.03888,
     "end_time": "2024-05-01T04:12:09.435525",
     "exception": false,
     "start_time": "2024-05-01T04:12:09.396645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "import random\n",
    "import pandas as pd\n",
    "\n",
    "def linear_greedy_bandit_epsilon(dataset, num_arms, epsilon, num_rounds):\n",
    "    model = LinearRegression()\n",
    "    total_rewards = 0\n",
    "    chosen_arms = []\n",
    "    \n",
    "    # Initialize the dataset for training the model\n",
    "    training_data = pd.DataFrame()\n",
    "    for arm in range(num_arms):\n",
    "        # Attempt to start with one example for each arm\n",
    "        arm_data = dataset[dataset['match_id'] == arm]\n",
    "        if not arm_data.empty:\n",
    "            training_data = pd.concat([training_data, arm_data.iloc[:1]], ignore_index=True)\n",
    "\n",
    "    # Training the model on initial data if available\n",
    "    if not training_data.empty:\n",
    "        model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "        for _ in range(num_rounds):\n",
    "            # Exploration vs. Exploitation\n",
    "            if random.random() < epsilon:\n",
    "                # Explore: Randomly select an arm\n",
    "                chosen_arm_index = dataset.sample(n=1).index.item()\n",
    "            else:\n",
    "                # Exploit: Select the arm with the highest predicted reward\n",
    "                predictions = model.predict(dataset[['similarity_score']])\n",
    "                dataset.loc[:, 'predicted_reward'] = predictions\n",
    "                max_indices = dataset.groupby('match_id')['predicted_reward'].idxmax()\n",
    "                chosen_arm_index = dataset.loc[max_indices].sample(n=1).index.item()\n",
    "            \n",
    "            # Observe the reward and the chosen arm\n",
    "            reward = dataset.at[chosen_arm_index, 'response']\n",
    "            total_rewards += reward\n",
    "            chosen_arm = dataset.at[chosen_arm_index, 'match_id']\n",
    "            chosen_arms.append(chosen_arm)\n",
    "            \n",
    "            # Add this data point to the training dataset\n",
    "            training_data = pd.concat([training_data, dataset.loc[chosen_arm_index:chosen_arm_index]], ignore_index=True)\n",
    "            \n",
    "            # Re-train the model with the updated training data\n",
    "            model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "    return chosen_arms, total_rewards\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7c895b1",
   "metadata": {
    "papermill": {
     "duration": 0.111694,
     "end_time": "2024-05-01T04:12:09.567435",
     "exception": false,
     "start_time": "2024-05-01T04:12:09.455741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "linear greedy output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "16337b3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:09.609671Z",
     "iopub.status.busy": "2024-05-01T04:12:09.608109Z",
     "iopub.status.idle": "2024-05-01T04:12:12.788558Z",
     "shell.execute_reply": "2024-05-01T04:12:12.787391Z"
    },
    "papermill": {
     "duration": 3.204955,
     "end_time": "2024-05-01T04:12:12.791283",
     "exception": false,
     "start_time": "2024-05-01T04:12:09.586328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chosen arms per round: [195, 434, 385, 69, 402, 297, 392, 560, 225, 134, 882, 888, 147, 492, 377, 253, 161, 796, 532, 850, 104, 361, 653, 621, 140, 630, 155, 178, 611, 201, 296, 95, 478, 770, 36, 40, 182, 531, 386, 123, 515, 863, 648, 854, 157, 528, 138, 289, 58, 469, 52, 773, 727, 809, 820, 26, 605, 246, 800, 71, 782, 531, 69, 433, 678, 855, 125, 208, 287, 515, 178, 822, 367, 771, 118, 492, 876, 604, 827, 465, 852, 656, 142, 804, 258, 319, 225, 574, 566, 699, 168, 568, 16, 392, 826, 188, 702, 881, 226, 586]\n",
      "Total rewards accumulated: 100\n"
     ]
    }
   ],
   "source": [
    "results = linear_greedy_bandit(predf, num_arms=8, num_rounds=100)\n",
    "print(\"Chosen arms per round:\", results[0])\n",
    "print(\"Total rewards accumulated:\", results[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67a80be7",
   "metadata": {
    "papermill": {
     "duration": 0.016054,
     "end_time": "2024-05-01T04:12:12.823816",
     "exception": false,
     "start_time": "2024-05-01T04:12:12.807762",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "linear greedy with epsilon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f864eb44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:12.860531Z",
     "iopub.status.busy": "2024-05-01T04:12:12.859845Z",
     "iopub.status.idle": "2024-05-01T04:12:16.013277Z",
     "shell.execute_reply": "2024-05-01T04:12:16.011879Z"
    },
    "papermill": {
     "duration": 3.175996,
     "end_time": "2024-05-01T04:12:16.016086",
     "exception": false,
     "start_time": "2024-05-01T04:12:12.840090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chosen arms per round: [74, 172, 395, 837, 728, 166, 186, 527, 674, 707, 696, 83, 771, 570, 19, 583, 271, 561, 278, 261, 62, 628, 200, 692, 778, 872, 369, 385, 626, 829, 636, 157, 108, 205, 290, 473, 577, 607, 18, 383, 588, 489, 620, 284, 50, 420, 168, 242, 405, 178, 415, 705, 705, 761, 775, 112, 61, 81, 214, 865, 134, 305, 599, 174, 315, 607, 137, 607, 288, 247, 383, 854, 308, 866, 129, 266, 369, 31, 306, 459, 266, 834, 220, 281, 251, 812, 546, 130, 407, 706, 490, 400, 365, 232, 145, 102, 284, 798, 814, 251]\n",
      "Total rewards accumulated: 66\n"
     ]
    }
   ],
   "source": [
    "results = linear_greedy_bandit_epsilon(predf, num_arms=8,epsilon=0.5, num_rounds=100)\n",
    "print(\"Chosen arms per round:\", results[0])\n",
    "print(\"Total rewards accumulated:\", results[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "54756973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:16.051542Z",
     "iopub.status.busy": "2024-05-01T04:12:16.051125Z",
     "iopub.status.idle": "2024-05-01T04:12:16.551716Z",
     "shell.execute_reply": "2024-05-01T04:12:16.550539Z"
    },
    "papermill": {
     "duration": 0.522013,
     "end_time": "2024-05-01T04:12:16.555099",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.033086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a007e382",
   "metadata": {
    "papermill": {
     "duration": 0.016905,
     "end_time": "2024-05-01T04:12:16.588860",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.571955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Simulation, Validation & Benchmarking"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26c319da",
   "metadata": {
    "papermill": {
     "duration": 0.017349,
     "end_time": "2024-05-01T04:12:16.623128",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.605779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "specific user for matchmaking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7f64e94e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:16.659780Z",
     "iopub.status.busy": "2024-05-01T04:12:16.659082Z",
     "iopub.status.idle": "2024-05-01T04:12:16.670328Z",
     "shell.execute_reply": "2024-05-01T04:12:16.669054Z"
    },
    "papermill": {
     "duration": 0.032937,
     "end_time": "2024-05-01T04:12:16.673466",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.640529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "user_id = 2\n",
    "user_data = predf[predf['user_id'] == user_id]\n",
    "num_arms = user_data['match_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "93e70395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:16.711692Z",
     "iopub.status.busy": "2024-05-01T04:12:16.710806Z",
     "iopub.status.idle": "2024-05-01T04:12:16.727095Z",
     "shell.execute_reply": "2024-05-01T04:12:16.725813Z"
    },
    "papermill": {
     "duration": 0.038668,
     "end_time": "2024-05-01T04:12:16.729778",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.691110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>match_id</th>\n",
       "      <th>similarity_score</th>\n",
       "      <th>response</th>\n",
       "      <th>predicted_reward</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.991195</td>\n",
       "      <td>1</td>\n",
       "      <td>0.993888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.972371</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.179203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1798</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.999149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2696</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.777127</td>\n",
       "      <td>1</td>\n",
       "      <td>0.865997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3594</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.056732</td>\n",
       "      <td>0</td>\n",
       "      <td>0.367826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>801916</th>\n",
       "      <td>2</td>\n",
       "      <td>893</td>\n",
       "      <td>0.979640</td>\n",
       "      <td>1</td>\n",
       "      <td>0.986985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>802814</th>\n",
       "      <td>2</td>\n",
       "      <td>894</td>\n",
       "      <td>0.292241</td>\n",
       "      <td>0</td>\n",
       "      <td>0.576313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>803712</th>\n",
       "      <td>2</td>\n",
       "      <td>895</td>\n",
       "      <td>-0.413951</td>\n",
       "      <td>0</td>\n",
       "      <td>0.154413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>804610</th>\n",
       "      <td>2</td>\n",
       "      <td>896</td>\n",
       "      <td>0.224405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.535786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>805508</th>\n",
       "      <td>2</td>\n",
       "      <td>897</td>\n",
       "      <td>-0.991463</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.190609</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>898 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        user_id  match_id  similarity_score  response  predicted_reward\n",
       "2             2         0          0.991195         1          0.993888\n",
       "900           2         1         -0.972371         0         -0.179203\n",
       "1798          2         2          1.000000         1          0.999149\n",
       "2696          2         3          0.777127         1          0.865997\n",
       "3594          2         4         -0.056732         0          0.367826\n",
       "...         ...       ...               ...       ...               ...\n",
       "801916        2       893          0.979640         1          0.986985\n",
       "802814        2       894          0.292241         0          0.576313\n",
       "803712        2       895         -0.413951         0          0.154413\n",
       "804610        2       896          0.224405         0          0.535786\n",
       "805508        2       897         -0.991463         0         -0.190609\n",
       "\n",
       "[898 rows x 5 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c66448",
   "metadata": {
    "papermill": {
     "duration": 0.017579,
     "end_time": "2024-05-01T04:12:16.765710",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.748131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Simulation: Matchmaking (user based)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a92a37ce",
   "metadata": {
    "papermill": {
     "duration": 0.017491,
     "end_time": "2024-05-01T04:12:16.801581",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.784090",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "simulation e greedy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cb6503df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:16.841417Z",
     "iopub.status.busy": "2024-05-01T04:12:16.840435Z",
     "iopub.status.idle": "2024-05-01T04:12:16.851438Z",
     "shell.execute_reply": "2024-05-01T04:12:16.849976Z"
    },
    "papermill": {
     "duration": 0.035672,
     "end_time": "2024-05-01T04:12:16.854785",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.819113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def epsilon_greedy_matchmaking(user_id, user_data, num_arms, epsilon, num_rounds):\n",
    "    estimated_rewards = [0] * num_arms\n",
    "    num_selected = [0] * num_arms\n",
    "    total_reward = 0\n",
    "    selected_arms = []\n",
    "\n",
    "    for _ in range(num_rounds):\n",
    "        if random.random() < epsilon:\n",
    "            # Explore\n",
    "            chosen_arm = random.choice(user_data['match_id'].unique())\n",
    "        else:\n",
    "            # Exploit\n",
    "            chosen_arm = max(range(num_arms), key=lambda arm: estimated_rewards[arm])\n",
    "\n",
    "        # Simulate getting a reward for the chosen arm from the user interactions\n",
    "        reward_row = user_data[(user_data['user_id'] == user_id) & (user_data['match_id'] == chosen_arm)].sample()\n",
    "        reward = reward_row['response'].values[0]\n",
    "        total_reward += reward\n",
    "\n",
    "        # Update the estimated rewards and number of times each arm was selected\n",
    "        arm_index = list(user_data['match_id'].unique()).index(chosen_arm)\n",
    "        num_selected[arm_index] += 1\n",
    "        estimated_rewards[arm_index] += (reward - estimated_rewards[arm_index]) / num_selected[arm_index]\n",
    "\n",
    "        # If the reward is 1, add the arm to the list of selected arms\n",
    "        if reward == 1:\n",
    "            selected_arms.append(chosen_arm)\n",
    "\n",
    "    return selected_arms, total_reward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2d1d28b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:16.895724Z",
     "iopub.status.busy": "2024-05-01T04:12:16.894584Z",
     "iopub.status.idle": "2024-05-01T04:12:17.029796Z",
     "shell.execute_reply": "2024-05-01T04:12:17.028444Z"
    },
    "papermill": {
     "duration": 0.157532,
     "end_time": "2024-05-01T04:12:17.032976",
     "exception": false,
     "start_time": "2024-05-01T04:12:16.875444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Arms: [0, 0, 426, 0, 0, 438, 0, 74, 0, 394, 0, 558, 0, 138, 0, 835, 213, 0, 472, 509, 0, 0, 0, 0, 218, 0, 0, 418, 0, 333, 316, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "Total Reward: 67\n"
     ]
    }
   ],
   "source": [
    "epsilon = 0.5  # Exploration rate\n",
    "num_rounds = 100  # Number of rounds to simulate\n",
    "\n",
    "selected_arms, total_reward = epsilon_greedy_matchmaking(user_id, user_data, num_arms, epsilon, num_rounds)\n",
    "print(\"Selected Arms:\", selected_arms)\n",
    "print(\"Total Reward:\", total_reward)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d364063",
   "metadata": {
    "papermill": {
     "duration": 0.021735,
     "end_time": "2024-05-01T04:12:17.074626",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.052891",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "simulation thompson sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "70e1b2bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:17.116128Z",
     "iopub.status.busy": "2024-05-01T04:12:17.115379Z",
     "iopub.status.idle": "2024-05-01T04:12:17.129533Z",
     "shell.execute_reply": "2024-05-01T04:12:17.127273Z"
    },
    "papermill": {
     "duration": 0.038016,
     "end_time": "2024-05-01T04:12:17.132666",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.094650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def thompson_sampling_matchmaking(user_id, user_data, num_arms, num_rounds):\n",
    "    alpha = np.ones(num_arms)\n",
    "    beta = np.ones(num_arms)\n",
    "    total_reward = 0\n",
    "    selected_arms = []\n",
    "\n",
    "    for _ in range(num_rounds):\n",
    "        # Sample from the Beta distribution for each arm and choose the one with the highest sample\n",
    "        chosen_arm_index = np.argmax([np.random.beta(a + 1, b + 1) for a, b in zip(alpha, beta)])\n",
    "        chosen_arm = user_data['match_id'].unique()[chosen_arm_index]\n",
    "        \n",
    "        # Simulate getting a reward for the chosen arm from the user interactions\n",
    "        reward_row = user_data[(user_data['user_id'] == user_id) & (user_data['match_id'] == chosen_arm)].sample()\n",
    "        reward = reward_row['response'].values[0]\n",
    "        total_reward += reward\n",
    "\n",
    "        # If the reward is 1, add the arm to the list of selected arms\n",
    "        if reward == 1:\n",
    "            selected_arms.append(chosen_arm)\n",
    "        \n",
    "        # Update the alpha and beta values for the chosen arm\n",
    "        alpha[chosen_arm_index] += reward\n",
    "        beta[chosen_arm_index] += (1 - reward)\n",
    "\n",
    "    return selected_arms, total_reward\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3c660528",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:17.174270Z",
     "iopub.status.busy": "2024-05-01T04:12:17.173726Z",
     "iopub.status.idle": "2024-05-01T04:12:17.637386Z",
     "shell.execute_reply": "2024-05-01T04:12:17.635707Z"
    },
    "papermill": {
     "duration": 0.488816,
     "end_time": "2024-05-01T04:12:17.641206",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.152390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Arms: [388, 606, 3, 799, 37, 472, 148, 724, 272, 415, 125, 574, 875, 200, 5, 115, 808, 125, 41, 638, 125, 744, 0, 669, 773, 827, 609, 663, 574, 827, 824, 270, 112, 200, 855, 450, 41, 739, 662]\n",
      "Total Reward: 39\n"
     ]
    }
   ],
   "source": [
    "selected_arms, total_reward = thompson_sampling_matchmaking(user_id, user_data, num_arms, num_rounds)\n",
    "print(\"Selected Arms:\", selected_arms)\n",
    "print(\"Total Reward:\", total_reward)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b36e2d59",
   "metadata": {
    "papermill": {
     "duration": 0.01982,
     "end_time": "2024-05-01T04:12:17.680829",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.661009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "simulation linear greedy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "35c2812b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:17.723554Z",
     "iopub.status.busy": "2024-05-01T04:12:17.721896Z",
     "iopub.status.idle": "2024-05-01T04:12:17.739696Z",
     "shell.execute_reply": "2024-05-01T04:12:17.738618Z"
    },
    "papermill": {
     "duration": 0.043572,
     "end_time": "2024-05-01T04:12:17.743315",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.699743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def linear_greedy_epsilon_matchmaking(user_id, user_data, num_arms, epsilon, num_rounds):\n",
    "    model = LinearRegression()\n",
    "    total_reward = 0\n",
    "    selected_arms = []\n",
    "    \n",
    "    # Initialize the dataset for training the model\n",
    "    training_data = pd.DataFrame()\n",
    "    for arm in range(num_arms):\n",
    "        arm_data = user_data[user_data['match_id'] == arm]\n",
    "        if not arm_data.empty:\n",
    "            training_data = pd.concat([training_data, arm_data.iloc[:1]], ignore_index=True)\n",
    "    \n",
    "    # Check if there are any entries in the training data before fitting\n",
    "    if not training_data.empty:\n",
    "        model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "        for _ in range(num_rounds):\n",
    "            if random.random() < epsilon:\n",
    "                # Explore\n",
    "                chosen_arm = random.choice(user_data['match_id'].unique())\n",
    "            else:\n",
    "                # Exploit: Choose the arm with the highest predicted reward\n",
    "                predictions = model.predict(user_data[['similarity_score']])\n",
    "                user_data.loc[:, 'predicted_reward'] = predictions\n",
    "                chosen_arm = user_data.loc[user_data['predicted_reward'].idxmax(), 'match_id']\n",
    "            \n",
    "            # Observe the reward and update the model accordingly\n",
    "            reward_row = user_data[(user_data['user_id'] == user_id) & (user_data['match_id'] == chosen_arm)].sample()\n",
    "            reward = reward_row['response'].values[0]\n",
    "            total_reward += reward\n",
    "\n",
    "            # If the reward is 1, add the arm to the list of selected arms\n",
    "            if reward == 1:\n",
    "                selected_arms.append(chosen_arm)\n",
    "            \n",
    "            # Add this data point to the training dataset and retrain the model\n",
    "            if chosen_arm in training_data['match_id'].values:\n",
    "                # Update the existing data point\n",
    "                arm_index = training_data.index[training_data['match_id'] == chosen_arm].tolist()[0]\n",
    "                training_data.loc[arm_index, 'response'] = reward\n",
    "            else:\n",
    "                # Add new data point\n",
    "                training_data = pd.concat([training_data, reward_row], ignore_index=True)\n",
    "            model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "    return selected_arms, total_reward\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a02f6837",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:17.788108Z",
     "iopub.status.busy": "2024-05-01T04:12:17.785587Z",
     "iopub.status.idle": "2024-05-01T04:12:19.110098Z",
     "shell.execute_reply": "2024-05-01T04:12:19.108854Z"
    },
    "papermill": {
     "duration": 1.348401,
     "end_time": "2024-05-01T04:12:19.112849",
     "exception": false,
     "start_time": "2024-05-01T04:12:17.764448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Arms: [337, 2, 2, 2, 2, 610, 2, 2, 345, 2, 2, 2, 2, 714, 816, 2, 2, 41, 2, 2, 2, 2, 523, 575, 200, 2, 2, 2, 2, 2, 2, 2, 251, 2, 2, 2, 2, 2, 2, 178, 357, 870, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 326, 672, 2, 2, 2]\n",
      "Total Reward: 60\n"
     ]
    }
   ],
   "source": [
    "selected_arms, total_reward = linear_greedy_epsilon_matchmaking(user_id, user_data, num_arms, epsilon, num_rounds)\n",
    "print(\"Selected Arms:\", selected_arms)\n",
    "print(\"Total Reward:\", total_reward)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a881b298",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:19.149908Z",
     "iopub.status.busy": "2024-05-01T04:12:19.149518Z",
     "iopub.status.idle": "2024-05-01T04:12:19.163855Z",
     "shell.execute_reply": "2024-05-01T04:12:19.162530Z"
    },
    "papermill": {
     "duration": 0.036159,
     "end_time": "2024-05-01T04:12:19.166701",
     "exception": false,
     "start_time": "2024-05-01T04:12:19.130542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def linear_greedy_matchmaking(user_id, user_data, num_arms, num_rounds):\n",
    "    model = LinearRegression()\n",
    "    total_reward = 0\n",
    "    selected_arms = []\n",
    "    \n",
    "    # Initialize the dataset for training the model\n",
    "    training_data = pd.DataFrame()\n",
    "    for arm in range(num_arms):\n",
    "        arm_data = user_data[user_data['match_id'] == arm]\n",
    "        if not arm_data.empty:\n",
    "            # Start with one example for each arm if possible\n",
    "            training_data = pd.concat([training_data, arm_data.iloc[:1]], ignore_index=True)\n",
    "    \n",
    "    # Training the model on initial data if available\n",
    "    if not training_data.empty:\n",
    "        model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "        for _ in range(num_rounds):\n",
    "            # Exploit: Choose the arm with the highest predicted reward\n",
    "            predictions = model.predict(user_data[['similarity_score']])\n",
    "            user_data.loc[:, 'predicted_reward'] = predictions\n",
    "            chosen_arm = user_data.loc[user_data['predicted_reward'].idxmax(), 'match_id']\n",
    "            \n",
    "            # Simulate getting a reward for the chosen arm from the user interactions\n",
    "            reward_row = user_data[(user_data['user_id'] == user_id) & (user_data['match_id'] == chosen_arm)].sample()\n",
    "            reward = reward_row['response'].values[0]\n",
    "            total_reward += reward\n",
    "\n",
    "            # If the reward is 1, add the arm to the list of selected arms\n",
    "            if reward == 1:\n",
    "                selected_arms.append(chosen_arm)\n",
    "            \n",
    "            # Update the training data and retrain the model\n",
    "            training_data = pd.concat([training_data, reward_row], ignore_index=True)\n",
    "            model.fit(training_data[['similarity_score']], training_data['response'])\n",
    "\n",
    "    return selected_arms, total_reward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8798d057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:19.206031Z",
     "iopub.status.busy": "2024-05-01T04:12:19.205555Z",
     "iopub.status.idle": "2024-05-01T04:12:20.552350Z",
     "shell.execute_reply": "2024-05-01T04:12:20.551170Z"
    },
    "papermill": {
     "duration": 1.369657,
     "end_time": "2024-05-01T04:12:20.555182",
     "exception": false,
     "start_time": "2024-05-01T04:12:19.185525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Arms: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n",
      "Total Reward: 100\n"
     ]
    }
   ],
   "source": [
    "selected_arms, total_reward = linear_greedy_matchmaking(user_id, user_data, num_arms, num_rounds)\n",
    "print(\"Selected Arms:\", selected_arms)\n",
    "print(\"Total Reward:\", total_reward)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6b43ba3",
   "metadata": {
    "papermill": {
     "duration": 0.017141,
     "end_time": "2024-05-01T04:12:20.590757",
     "exception": false,
     "start_time": "2024-05-01T04:12:20.573616",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## CV VALIDATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b408a30a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:20.627898Z",
     "iopub.status.busy": "2024-05-01T04:12:20.627493Z",
     "iopub.status.idle": "2024-05-01T04:12:20.643302Z",
     "shell.execute_reply": "2024-05-01T04:12:20.642131Z"
    },
    "papermill": {
     "duration": 0.037445,
     "end_time": "2024-05-01T04:12:20.645574",
     "exception": false,
     "start_time": "2024-05-01T04:12:20.608129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def cross_validate_bandits(dataset, num_arms, num_rounds, num_folds=5, epsilon=0.5):\n",
    "    from sklearn.model_selection import KFold\n",
    "\n",
    "    kf = KFold(n_splits=num_folds, shuffle=True, random_state=42)\n",
    "    results = {\n",
    "        'low_epsilon_greedy': [],\n",
    "        'epsilon_greedy': [],\n",
    "        'epsilon_greedy2': [],\n",
    "        'epsilon_greedy3': [],\n",
    "        'thompson_sampling': [],\n",
    "        'linear_greedy': [],\n",
    "        'linear_greedy_epsilon': [],\n",
    "        'linear_greedy_epsilon2': [],\n",
    "        'linear_greedy_epsilon3': []\n",
    "    }\n",
    "\n",
    "    fold_index = 0\n",
    "    for train_index, _ in kf.split(dataset):\n",
    "        train_data = dataset.iloc[train_index]\n",
    "\n",
    "        # Epsilon Greedy with low epsilon\n",
    "        _, _, _, _, epsilon_rewards = epsilon_greedy_bandit(train_data, num_arms, 0.1, num_rounds)\n",
    "        results['low_epsilon_greedy'].append((fold_index, epsilon_rewards))\n",
    "\n",
    "        # Epsilon Greedy with default epsilon\n",
    "        _, _, _, _, epsilon_rewards = epsilon_greedy_bandit(train_data, num_arms, epsilon, num_rounds)\n",
    "        results['epsilon_greedy'].append((fold_index, epsilon_rewards))\n",
    "\n",
    "        # Epsilon Greedy with higher epsilon\n",
    "        _, _, _, _, epsilon_rewards = epsilon_greedy_bandit(train_data, num_arms, 0.7, num_rounds)\n",
    "        results['epsilon_greedy2'].append((fold_index, epsilon_rewards))\n",
    "\n",
    "        # Epsilon Greedy with even higher epsilon\n",
    "        _, _, _, _, epsilon_rewards = epsilon_greedy_bandit(train_data, num_arms, 0.9, num_rounds)\n",
    "        results['epsilon_greedy3'].append((fold_index, epsilon_rewards))\n",
    "\n",
    "        # Thompson Sampling\n",
    "        _, _, thompson_rewards = thompson_sampling_bandit(train_data, num_arms, num_rounds)\n",
    "        results['thompson_sampling'].append((fold_index, thompson_rewards))\n",
    "\n",
    "        # Linear Greedy\n",
    "        _, linear_rewards = linear_greedy_bandit(train_data, num_arms, num_rounds)\n",
    "        results['linear_greedy'].append((fold_index, linear_rewards))\n",
    "\n",
    "        # Linear Greedy with exploration (epsilon)\n",
    "        _, linear_epsilon_rewards = linear_greedy_bandit_epsilon(train_data, num_arms, epsilon, num_rounds)\n",
    "        results['linear_greedy_epsilon'].append((fold_index, linear_epsilon_rewards))\n",
    "\n",
    "        # Linear Greedy with higher exploration (epsilon=0.7)\n",
    "        _, linear_epsilon_rewards = linear_greedy_bandit_epsilon(train_data, num_arms,0.7, num_rounds)\n",
    "        results['linear_greedy_epsilon2'].append((fold_index, linear_epsilon_rewards))\n",
    "\n",
    "        # Linear Greedy with even higher exploration (epsilon=0.9)\n",
    "        _, linear_epsilon_rewards = linear_greedy_bandit_epsilon(train_data, num_arms, 0.9,num_rounds)\n",
    "        results['linear_greedy_epsilon3'].append((fold_index, linear_epsilon_rewards))\n",
    "\n",
    "        fold_index += 1\n",
    "\n",
    "    return results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7649a4e1",
   "metadata": {
    "papermill": {
     "duration": 0.017171,
     "end_time": "2024-05-01T04:12:20.680267",
     "exception": false,
     "start_time": "2024-05-01T04:12:20.663096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "result + plot function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "935bae2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:20.716549Z",
     "iopub.status.busy": "2024-05-01T04:12:20.716165Z",
     "iopub.status.idle": "2024-05-01T04:12:20.726429Z",
     "shell.execute_reply": "2024-05-01T04:12:20.725026Z"
    },
    "papermill": {
     "duration": 0.031281,
     "end_time": "2024-05-01T04:12:20.728815",
     "exception": false,
     "start_time": "2024-05-01T04:12:20.697534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def analyze_results(results):\n",
    "    for key, value in results.items():\n",
    "        print(f\"{key}: Mean Reward = {np.mean(value):.2f}, Std Dev = {np.std(value):.2f}\")\n",
    "# plot functiojn\n",
    "def plot_results(results):\n",
    "    plt.figure(figsize=(12, 8))\n",
    "    max_folds = 0  # Variable to track the maximum number of folds encountered\n",
    "\n",
    "    for policy, data in results.items():\n",
    "        if data:  # Check if data is not empty\n",
    "            folds, rewards = zip(*data)  # Unpack fold indices and rewards\n",
    "            plt.plot(folds, rewards, marker='o', label=policy)\n",
    "            max_folds = max(max_folds, max(folds) + 1)  # Update max_folds if current is greater\n",
    "\n",
    "    plt.title('Rewards by Fold for Different Bandit Policies')\n",
    "    plt.xlabel('Fold Index')\n",
    "    plt.ylabel('Total Rewards')\n",
    "    plt.xticks(range(max_folds))  # Use max_folds to set x-axis ticks\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e3fdabf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T04:12:20.765804Z",
     "iopub.status.busy": "2024-05-01T04:12:20.765362Z",
     "iopub.status.idle": "2024-05-01T05:44:09.355871Z",
     "shell.execute_reply": "2024-05-01T05:44:09.354985Z"
    },
    "papermill": {
     "duration": 5508.615137,
     "end_time": "2024-05-01T05:44:09.361344",
     "exception": false,
     "start_time": "2024-05-01T04:12:20.746207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "low_epsilon_greedy: Mean Reward = 1897.80, Std Dev = 1897.00\n",
      "epsilon_greedy: Mean Reward = 1799.60, Std Dev = 1797.81\n",
      "epsilon_greedy2: Mean Reward = 1786.20, Std Dev = 1784.59\n",
      "epsilon_greedy3: Mean Reward = 1755.40, Std Dev = 1753.77\n",
      "thompson_sampling: Mean Reward = 1765.70, Std Dev = 1763.98\n",
      "linear_greedy: Mean Reward = 5001.00, Std Dev = 4999.00\n",
      "linear_greedy_epsilon: Mean Reward = 3388.00, Std Dev = 3386.04\n",
      "linear_greedy_epsilon2: Mean Reward = 2718.60, Std Dev = 2716.71\n",
      "linear_greedy_epsilon3: Mean Reward = 2053.80, Std Dev = 2051.99\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Usage\n",
    "num_arms = len(predf['match_id'].unique())\n",
    "num_rounds = 10000  # Adjust this as necessary based on your scenario\n",
    "\n",
    "# Assuming a mock dataset and parameters for the demonstration\n",
    "# num_arms = 15  # Example number of arms\n",
    "# num_rounds = 100  # Example number of rounds for each fold\n",
    "# data = {\n",
    "#    'match_id': np.random.randint(0, num_arms, 1000),\n",
    "#    'response': np.random.randint(0, 2, 1000),  # Binary rewards as an example\n",
    "#    'similarity_score': np.random.random(1000)  # Example feature for linear regression\n",
    "#}\n",
    "#dataset = pd.DataFrame(data)\n",
    "\n",
    "# Run cross-validation\n",
    "results = cross_validate_bandits(predf, num_arms, num_rounds)\n",
    "analyze_results(results)\n",
    "plot_results(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3f1a2e97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T05:44:09.412424Z",
     "iopub.status.busy": "2024-05-01T05:44:09.411860Z",
     "iopub.status.idle": "2024-05-01T05:44:09.421242Z",
     "shell.execute_reply": "2024-05-01T05:44:09.420012Z"
    },
    "papermill": {
     "duration": 0.041075,
     "end_time": "2024-05-01T05:44:09.423867",
     "exception": false,
     "start_time": "2024-05-01T05:44:09.382792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_results_specific(results, keys_to_plot):\n",
    "    \"\"\"\n",
    "    Plots specific keys from the results dictionary.\n",
    "\n",
    "    :param results: Dictionary containing series data.\n",
    "    :param keys_to_plot: List of keys that should be plotted.\n",
    "    \"\"\"\n",
    "    for key in keys_to_plot:\n",
    "        if key in results:\n",
    "            plt.plot(results[key], label=key)\n",
    "        else:\n",
    "            print(f\"Warning: Key '{key}' not found in results.\")\n",
    "    plt.legend()\n",
    "    plt.xlabel('Trials')\n",
    "    plt.ylabel('Reward')\n",
    "    plt.title('Comparison of Strategies')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a848874c",
   "metadata": {
    "papermill": {
     "duration": 0.018974,
     "end_time": "2024-05-01T05:44:09.462765",
     "exception": false,
     "start_time": "2024-05-01T05:44:09.443791",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "epsilon greedy & thompson sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ce82a2c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T05:44:09.503633Z",
     "iopub.status.busy": "2024-05-01T05:44:09.502649Z",
     "iopub.status.idle": "2024-05-01T05:44:09.885953Z",
     "shell.execute_reply": "2024-05-01T05:44:09.884651Z"
    },
    "papermill": {
     "duration": 0.407211,
     "end_time": "2024-05-01T05:44:09.888699",
     "exception": false,
     "start_time": "2024-05-01T05:44:09.481488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results_specific(results, ['epsilon_greedy', 'thompson_sampling'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d051019",
   "metadata": {
    "papermill": {
     "duration": 0.019387,
     "end_time": "2024-05-01T05:44:09.927819",
     "exception": false,
     "start_time": "2024-05-01T05:44:09.908432",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "epsilon greedy diff epsilon comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "13b220fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T05:44:09.969298Z",
     "iopub.status.busy": "2024-05-01T05:44:09.968855Z",
     "iopub.status.idle": "2024-05-01T05:44:10.397672Z",
     "shell.execute_reply": "2024-05-01T05:44:10.396504Z"
    },
    "papermill": {
     "duration": 0.452696,
     "end_time": "2024-05-01T05:44:10.400349",
     "exception": false,
     "start_time": "2024-05-01T05:44:09.947653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results_specific(results, ['low_epsilon_greedy', 'epsilon_greedy', 'epsilon_greedy2', 'epsilon_greedy3'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5b2d53d",
   "metadata": {
    "papermill": {
     "duration": 0.020198,
     "end_time": "2024-05-01T05:44:10.441135",
     "exception": false,
     "start_time": "2024-05-01T05:44:10.420937",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "linear epsilon greedy diff epsilon comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "59bd5f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T05:44:10.484146Z",
     "iopub.status.busy": "2024-05-01T05:44:10.483716Z",
     "iopub.status.idle": "2024-05-01T05:44:10.833404Z",
     "shell.execute_reply": "2024-05-01T05:44:10.832121Z"
    },
    "papermill": {
     "duration": 0.373675,
     "end_time": "2024-05-01T05:44:10.835669",
     "exception": false,
     "start_time": "2024-05-01T05:44:10.461994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results_specific(results, ['linear_greedy_epsilon', 'linear_greedy_epsilon2', 'linear_greedy_epsilon3'])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4751114,
     "sourceId": 8055577,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5530.918088,
   "end_time": "2024-05-01T05:44:11.592034",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-01T04:12:00.673946",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
